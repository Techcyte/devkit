{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Techcyte Development Kit","text":"<p>This site provides documentation and example code for interfacing with Techcyte's system. Topics are organized into subsections. Explore the sections in the navbar above, for the resources you need.</p>"},{"location":"#available-resources","title":"Available Resources","text":""},{"location":"#api-bridge","title":"API Bridge","text":"<p>Provides an example webserver for interfacing with Techcyte as an external model provider. Includes a Techcyte API client, and request/response samples.</p>"},{"location":"#model-hosting-service","title":"Model Hosting Service","text":"<p>Contains example code and documentation for creating your own classification container for deployment in Techcyte's model hosting service.</p>"},{"location":"#guides","title":"Guides","text":"<p>A listing of how-to documents when working on the Techcyte App.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure you have access to Techcyte's system credentials or API keys.</li> <li>Install any required dependencies as outlined in the individual docs.</li> <li>Familiarity with basic programming concepts and tools like Git, python, and docker.</li> </ul>"},{"location":"api-bridge/","title":"Building an API Bridge","text":"<p>Using Techcyte's classification webhook system, third-party developers can run their image classification code on their own infrastructure and report results back to Techcyte. When a user creates an image classification task, the webhook is notified with the appropriate variables listed below.</p> <p>Example Code Features:</p> <ul> <li>Modular Code: Implement your image processing logic in <code>webserver.py</code>\u2019s <code>process_image()</code> function.</li> <li>Image Handling: Support DICOM/SVS/TIFF via <code>pydicom</code>, <code>openslide-python</code></li> <li>Visualization: On the Techcyte app, four box objects are drawn on the image for result verification.</li> </ul>"},{"location":"api-bridge/#webhook-variables","title":"Webhook variables","text":"<p>Supplied in Production:</p> <ul> <li><code>company_id</code>: Company identifier, useful for billing</li> <li><code>scans</code>: A mapping of scan identifiers to presigned image download url</li> <li><code>task_id</code>: Task identifier</li> <li><code>case_id</code>: The assigned case id (unused for most calls)</li> <li><code>model_id</code>: A user supplied variable used to customize webhook calls</li> <li><code>jwt_token</code>: A task specific jwt token used for authorizing requests to techcyte (not required for local testing)</li> </ul>"},{"location":"api-bridge/#getting-started","title":"Getting Started","text":""},{"location":"api-bridge/#1-clone-the-repository","title":"1. Clone the Repository:","text":"<pre><code>git clone https://github.com/Techcyte/devkit.git\ncd devkit/src/api-bridge\n</code></pre>"},{"location":"api-bridge/#2-run-the-example","title":"2. Run the example:","text":"<ul> <li>You'll need to generate an API key and specify when running the webserver. See creating an API key</li> <li> <p>Start the webserver <pre><code># Install requirements with\n# pip install -r requirements.txt\n# openslide-bin may be required depending on your system\n# pip install openslide-bin\npython webserver.py --port 3000 --api-key-id e-_tfr-redacted-Vhjt --api-key-secret FNI-redacted-LvH\n</code></pre></p> </li> <li> <p>Mock a techcyte webhook request. See creating a debug request for test <code>data</code> variables. <pre><code> curl -X POST --url \"http://localhost:3000/webhook\" \\  \n --header \"Content-Type: application/json\" \\\n --data '{ \\\n    \"company_id\": \"2380941\", \\\n    \"scans\": { \\\n      \"8823846\": \"https://techcyteci-preprod.s3.us-west-2.amazonaws.com/redacted\" \\\n    }, \\\n    \"case_id\": \"aHVtYW5DYXNlOjI0MjEzNjY=\", \\\n    \"task_id\": \"dGFzazoxODU4MzU=\", \\\n    \"model_name\": \"\" \\\n  }'\n</code></pre></p> </li> </ul>"},{"location":"api-bridge/#3-customize-your-code","title":"3. Customize Your Code:","text":"<ul> <li>Edit <code>webserver.py</code>, replacing the <code>process_image()</code> function with your classifier logic.</li> <li>Ensure the output matches the required schema (see below).</li> </ul> <p>It is possible to run this example with <code>ngrok</code> (https://ngrok.com) and process Techcyte images locally for testing (<code>ngrok http 3000</code>). But a more robust solution should be implemented for production environments. </p>"},{"location":"api-bridge/#4-deploying","title":"4. Deploying","text":"<p>See creating a debug request for setting up your endpoint in the Techcyte app. The only difference is you will fill in the webhook url with your publicly available url.</p>"},{"location":"api-bridge/#posting-results","title":"Posting Results","text":"<p>You will need to modify the <code>caseResults</code> and/or <code>scanResults</code> values to see your results on the Techcyte app. See posting external model results.</p>"},{"location":"api-bridge/#implementation-tips","title":"Implementation tips","text":"<ol> <li> <p>Running a GPU classifier non-stop can be expensive. Consider using a system like AWS Lambda (triggered by an API bridge event) and AWS Batch to process requests efficiently.</p> </li> <li> <p>Images may be in <code>SVS</code>, <code>TIFF</code>, or <code>DICOM ZIP</code> format, handle as needed.</p> </li> </ol>"},{"location":"model-hosting-service/","title":"Model Hosting Service: Docker Template","text":"<p>The Model Hosting Service (MHS) enables Techcyte users to run GPU-based batch processing by uploading custom Docker containers as classifiers. This repository provides a template for developing and testing your container locally or in a production-like environment.</p> <p>We provide template files below that can be built upon and deployed to the Techcyte infrastructure.</p> <p>Code Features:</p> <ul> <li>Modularity: Implement your image processing logic in <code>main.py</code>\u2019s <code>process_image()</code> function.</li> <li>Test locally: Download an image from <code>SCAN_URL</code>, process it, and post results to Techcyte using provided environment variables.</li> <li>GPU Support: Uses NVIDIA CUDA with a simple GPU test via PyTorch.</li> <li>Image Handling: Supports DICOM/SVS/TIFF via <code>pydicom</code>, <code>openslide-python</code></li> </ul>"},{"location":"model-hosting-service/#environment-variables","title":"Environment Variables","text":"<p>Production</p> <ul> <li><code>HOST</code>: Techcyte host (e.g., <code>ci.techcyte.com</code>).</li> <li><code>TASK_ID</code>: Task identifier.</li> <li><code>SCAN_ID</code>: Scan identifier.</li> <li><code>SCAN_URL</code>: Presigned S3 URL for image download.</li> <li><code>JWT_TOKEN</code>: A task specific jwt token used for authorizing requests to techcyte (not required for local testing)</li> </ul> <p>Local testing</p> <ul> <li><code>API_KEY_ID</code>: Key id used while running locally</li> <li><code>API_KEY_SECRET</code>: Key secret used while running locally</li> </ul>"},{"location":"model-hosting-service/#step-by-step-instructions","title":"Step-by-step instructions","text":""},{"location":"model-hosting-service/#1-clone-the-repository","title":"1. Clone the Repository:","text":"<pre><code>git clone https://github.com/Techcyte/devkit.git\ncd devkit/src/model-hosting-service\n</code></pre>"},{"location":"model-hosting-service/#2-customize-your-code","title":"2. Customize Your Code","text":"<ul> <li>Edit <code>main.py</code>, replacing the <code>process_image()</code> function with your classifier logic.</li> <li>Ensure the output matches the required schema (see below).</li> <li>Add dependencies to <code>Dockerfile</code> if needed (e.g., <code>RUN pip3 install &lt;package&gt;</code>).</li> </ul>"},{"location":"model-hosting-service/#3-build-the-docker-image","title":"3. Build the Docker Image","text":"<pre><code>docker build -t my-docker-image:latest .\n</code></pre>"},{"location":"model-hosting-service/#4-test-locally","title":"4. Test locally","text":"<ul> <li>Provide environment variables:      <pre><code>docker run --rm --gpus all \\\n  -e HOST=\"ci.techcyte.com\" \\\n  -e TASK_ID=\"your-task-id\" \\\n  -e SCAN_ID=\"your-scan-id\" \\\n  -e SCAN_URL=\"https://example.com/image.svs\" \\\n  -e API_KEY_ID=\"your-api-key-id\" \\\n  -e API_KEY_SECRET=\"your-api-key-secret\" \\\n  my-docker-image:latest\n</code></pre></li> <li>If running on production <code>HOST=\"app.techcyte.com\"</code>, CI <code>HOST=\"ci.techcyte.com\"</code></li> <li>See Creating a debug request to obtain <code>TASK_ID</code>, <code>SCAN_ID</code> and <code>SCAN_URL</code> values</li> <li>See Creating an API key to obtain the api key id and secret</li> <li>Downloads the image, processes it, and posts results to Techcyte. Prints results if posting fails.</li> </ul>"},{"location":"model-hosting-service/#5-deploy","title":"5. Deploy","text":"<ul> <li>Push your image to the Techcyte container registry. See instructions here.</li> </ul>"},{"location":"model-hosting-service/#example-output-local-output","title":"Example Output (local output)","text":"<pre><code>CUDA is available! Using GPU: Tesla T4\nMatrix multiplication (1000x1000) completed in 0.0246 seconds\nResult sample: 21.861495971679688\nProcessing image: /input/image.svs\nGenerated 4 fake annotations\nVisualization saved to /output/result.png\nResults JSON: {\"caseResults\": {\"mitosisCount\": 4}, \"scanResults\": [{\"scanId\": \"test_scan\", \"geojson\": {...}}]}\n</code></pre> <p>You should have an image with a 2x2 grid or red squares.</p>"},{"location":"model-hosting-service/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>No GPU:</li> <li>Ensure NVIDIA Docker is installed (<code>nvidia-model-toolkit</code>).</li> <li>Verify <code>--gpus all</code> is used.</li> <li>Check CUDA compatibility (image uses CUDA 11.8; ensure your GPU supports it).</li> <li>If error persists, run without <code>--gpus all</code> to test CPU fallback.</li> <li>Image Issues: Ensure the input file is a valid SVS or TIFF. OpenSlide supports both.</li> <li>Posting Errors: Verify environment variables; invalid tokens print results for debugging.</li> <li>Large Images: OpenSlide handles large SVS files efficiently. For other formats (e.g., DICOM), add <code>pip3 install pydicom</code> to the Dockerfile.</li> <li>Memory Issues: Large images may require significant RAM; ensure your Docker host has enough resources.</li> </ul>"},{"location":"model-hosting-service/#posting-results","title":"Posting Results","text":"<p>You will need to modify the <code>caseResults</code> and/or <code>scanResults</code> values to see your results on the Techcyte app. See posting external model results.</p>"},{"location":"guides/","title":"Technical Guides","text":"<p>Select a topic on the left to get started.</p>"},{"location":"guides/bulk-import-tool/","title":"Techcyte: Bulk Scan Import Tool","text":""},{"location":"guides/bulk-import-tool/#i-introduction","title":"I. Introduction","text":"<p>The Bulk Import Tool is a utility provided to Techcyte users as a way to upload scanned image files. This tool supports DICOM, SVS, and TIFF uploads with optional metadata de-identification. De-identification occurs on the user's machine - no data is uploaded to Techcyte until the final upload page.</p>"},{"location":"guides/bulk-import-tool/#ii-prerequisites","title":"II. Prerequisites","text":"<p>In order to use the Bulk Import Tool you'll need:</p> <ul> <li>A Techcyte account with appropriate permission (Lab admin OR Lab user)</li> <li>The \"Bulk import tool\" feature flag turned on</li> </ul>"},{"location":"guides/bulk-import-tool/#iii-step-by-step-instructions","title":"III. Step-by-Step Instructions","text":"<p>We'll need to: select the files you want to upload, optionally redact PHI, keep/remove overview/label images, upload, and assign to a case.</p>"},{"location":"guides/bulk-import-tool/#1-visit-the-bulk-import-page","title":"1. Visit the Bulk Import page","text":"<p>From your worklist view, select Bulk Import from the menu dropdown</p> <p></p>"},{"location":"guides/bulk-import-tool/#2-select-your-files","title":"2. Select your files","text":"<p>Click \"Select files\" or \"Select DICOM directory\" to select your files. (A test image can be found here: CMU Openslide Sample)  </p> <p>NOTE: Files are modified if you don't select \"Direct Upload\"</p> <p></p>"},{"location":"guides/bulk-import-tool/#3-view-loaded-files","title":"3. View loaded files","text":"<p>Your image file should show in the list with a thumbnail. Click next to review metadata</p> <p></p>"},{"location":"guides/bulk-import-tool/#4-review-the-metadata-for-any-phi","title":"4. Review the metadata for any PHI","text":"<p>Some fields are critical for maintaining file integrity and are turned off by default. Click Auto redact to remove all fields that are unnecessary. Click Next at the bottom of the page.</p> <p></p>"},{"location":"guides/bulk-import-tool/#5-verify-the-images","title":"5. Verify the images","text":"<p>From this page you can review and omit label/overview images contained in the file. By default, SVS label and overview are removed when converting to TIFF redaction and uploading.</p> <p></p>"},{"location":"guides/bulk-import-tool/#6-review-before-upload","title":"6. Review before upload","text":"<p>Review your file tags/images before uploading, download redacted files, and remove files from upload candidates. Click Finalize when ready.</p> <p></p>"},{"location":"guides/bulk-import-tool/#7-upload","title":"7. Upload","text":"<p>Click Start upload and wait for the upload to complete.</p> <p></p>"},{"location":"guides/bulk-import-tool/#8-view-your-uploaded-scan","title":"8. View your uploaded scan","text":"<p>Click the link icon next to your image to review your scan.</p>"},{"location":"guides/bulk-import-tool/#9-correct-any-issues-with-the-scan","title":"9. Correct any issues with the scan","text":"<p>If your file's MPP could not automatically be determined, review your scan details and enter it on the Regions tab. Click reprocess and Save</p> <p></p>"},{"location":"guides/bulk-import-tool/#10-assign-to-a-case","title":"10. Assign to a case","text":"<p>At the top of the page click \"scan details page\". From this page, select \"Search for case\" and add to your case (If you don't have one, see creating a case).</p> <p></p> <p>Alternatively, the scan can be added to your case by visiting your worklist page, and selecting the scans view.</p> <p></p> <p>Select your image, click \"Link to case\", and select your case. </p> <p></p>"},{"location":"guides/bulk-import-tool/#iv-troubleshooting","title":"IV. Troubleshooting","text":"<ul> <li>DICOM files with base layers over 2GB in size may present issues for some browsers when attempting de-identification. Try zipping your file, and selecting \"Direct upload\" on the first bulk import page. NOTE: Do not upload any files containing PHI, verify offline.</li> <li>Disabling thumbnails will result in faster load times, especially for SVS/TIFF files, verify they contain no pixel PHI.</li> <li>For running algorithms in bulk as you import, see creating a case policy. </li> </ul>"},{"location":"guides/bulk-import-tool/#v-conclusion","title":"V. Conclusion","text":"<p>In a few steps we've uploaded a sample SVS file, and reviewed it on the scans page.</p> <p></p>"},{"location":"guides/creating-a-case/","title":"Creating a case","text":""},{"location":"guides/creating-a-case/#i-step-by-step-instructions","title":"I. Step-by-Step Instructions","text":"<p>We'll need to: visit the worklist page, configure a case.</p>"},{"location":"guides/creating-a-case/#1-visit-the-worklist-page","title":"1: Visit the worklist page","text":"<p>From your worklist view, click \"Add case\"  </p> <p> </p>"},{"location":"guides/creating-a-case/#2-configure-your-case","title":"2. Configure your case","text":"<p>Name your case, select a case type, and assignee.</p> <p> </p>"},{"location":"guides/creating-a-case/#3-view-your-case","title":"3. View your case","text":"<p>Your case is now available in the worklist menu.</p> <p></p> <p>Click your case link for the details view.</p> <p></p> <p>You can now add scans for processing. See the Bulk Scan Import Tool page.</p>"},{"location":"guides/creating-a-case-policy/","title":"Creating a case policy","text":"<p>In some cases, you may want to run an AI request automatically, as you import scans for example. By creating a case policy, you can define a set of filters to take an automatic action like starting a docker container.</p>"},{"location":"guides/creating-a-case-policy/#i-step-by-step-instructions","title":"I. Step-by-Step Instructions","text":"<p>We'll need to: visit the case policies page, and create the policy.</p>"},{"location":"guides/creating-a-case-policy/#1-visit-the-company-configuration-page","title":"1: Visit the company configuration page","text":"<p>From your worklist view, click the dropdown menu, select Company settings -&gt; configuration </p> <p> </p>"},{"location":"guides/creating-a-case-policy/#2-create-a-new-case-policy","title":"2: Create a new case policy","text":"<p>From company configuration, click the case policies tab, then click the plus (+) button to add a new case policy</p> <p> </p>"},{"location":"guides/creating-a-case-policy/#3-configure-the-policy","title":"3: Configure the policy","text":"<p>Below is an example configuration for starting the <code>Test Container</code> when a scan is added to an <code>H&amp;E Breast</code> case. Customize to fit your needs.</p> <p> </p>"},{"location":"guides/creating-a-debug-request/","title":"Creating a debug request","text":"<p>When debugging external bridges and model containers you'll need scan ids, task ids, and image urls. By creating debug request you can view these variables and test locally.</p>"},{"location":"guides/creating-a-debug-request/#i-step-by-step-instructions","title":"I. Step-by-Step Instructions","text":"<p>We'll need to: visit the case algorithms page, create a new debug algorithm, and create a debug request.</p>"},{"location":"guides/creating-a-debug-request/#1-visit-the-company-configuration-page","title":"1: Visit the company configuration page","text":"<p>From your worklist view, click the dropdown menu, select Company settings -&gt; configuration </p> <p> </p>"},{"location":"guides/creating-a-debug-request/#2-create-a-new-case-algorithm","title":"2: Create a new case algorithm","text":"<p>From company configuration, click the case algorithms tab, then click the plus (+) button to add a new case algorithm</p> <p> </p>"},{"location":"guides/creating-a-debug-request/#3-configure-case-algorithm","title":"3: Configure case algorithm","text":"<p>Name the algorithm \"Debug\" or something similar, set the model type to \"External\" and leave the webhook url blank. When the url is blank, webhook calls are skipped and the post request information is added to the task notes. Create when done.</p> <p> </p>"},{"location":"guides/creating-a-debug-request/#4-return-to-the-worklist","title":"4. Return to the worklist","text":"<p>Select your case. If you do not have one see creating a case</p> <p> </p>"},{"location":"guides/creating-a-debug-request/#5-create-a-new-ai-request","title":"5. Create a new AI request","text":"<p>On the image in your case (if you don't have one, use the bulk scan import tool), right click, select \"Create request\" -&gt; \"AI Request\". If you don't see this, see creating an AI request type.</p> <p> </p>"},{"location":"guides/creating-a-debug-request/#6-configure-a-debug-ai-request","title":"6. Configure a debug AI request","text":"<p>Select your previously created \"Debug algorithm\" from the Ai model dropdown, and click \"Create request\"</p> <p></p>"},{"location":"guides/creating-a-debug-request/#7-review-task-details","title":"7. Review task details","text":"<p>Your task details (to be used in local requests) will now be available in the AI results panel</p> <p></p> <p>Example data:</p> <pre><code>{\n  \"company_id\": \"2380941\",\n  \"scans\": {\n    \"8823846\": \"https://techcyteci-preprod.s3.us-west-2.amazonaws.com/files_uuid/1414532c-2954-4673-5e7c-1bbf8b33359b.8061860?X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=redacted\"\n  },\n  \"case_id\": \"aHVtYW5DYXNlOjI0MjEzNjY=\",\n  \"task_id\": \"dGFzazoxODU3MTQ=\",\n  \"model_name\": \"\"\n}\n</code></pre> <p>Note: The <code>scans</code> field is a mapping from <code>scan_id</code> to <code>scan_url</code>.</p>"},{"location":"guides/creating-an-ai-request-type/","title":"Creating an AI Task Type","text":""},{"location":"guides/creating-an-ai-request-type/#i-step-by-step-instructions","title":"I. Step-by-Step Instructions","text":"<p>We'll need to: visit the worklist page, configure a case.</p>"},{"location":"guides/creating-an-ai-request-type/#1-visit-the-worklist-page","title":"1: Visit the worklist page","text":"<p>From your worklist view, click the dropdown menu, select Company settings -&gt; configuration </p> <p> </p>"},{"location":"guides/creating-an-ai-request-type/#2-configure-your-task-type","title":"2. Configure your task type","text":"<p>In the Request Types tab, click \"Create request type\", and configure as shown below.</p> <p></p>"},{"location":"guides/creating-an-api-key/","title":"Creating an API key","text":"<p>When making requests to the Techcyte api, you'll need an API key id and secret. Follow these steps to create your own.</p>"},{"location":"guides/creating-an-api-key/#i-step-by-step-instructions","title":"I. Step-by-Step Instructions","text":"<p>We'll need to: visit the company page, configure a case.</p>"},{"location":"guides/creating-an-api-key/#1-visit-the-worklist-page","title":"1: Visit the worklist page","text":"<p>From your worklist view, click the dropdown menu, select Company settings -&gt; Company info </p> <p> </p>"},{"location":"guides/creating-an-api-key/#2-create-a-new-api-client","title":"2. Create a new API client","text":"<p>In the API Clients section, click \"Add API client\".</p> <p></p>"},{"location":"guides/creating-an-api-key/#3-configure-the-api-client","title":"3. Configure the API client","text":"<p>Configure and create. To report results and complete a task you must have <code>Lab Admin</code> or <code>Lab User</code> permission.</p> <p></p>"},{"location":"guides/creating-an-api-key/#4-copy-your-api-client-credentials","title":"4. Copy your API client credentials","text":"<p>Store your credentials in a safe place.</p> <p></p>"},{"location":"guides/downloading-objects/","title":"Downloading objects (example script)","text":"<p>For debugging, it is possible to download all objects from a given evaluation.</p>"},{"location":"guides/downloading-objects/#i-step-by-step-instructions","title":"I. Step-by-Step Instructions","text":"<p>We'll need to: collect the scan and evaluation id, generate API credentials, run the example script.</p>"},{"location":"guides/downloading-objects/#1-visit-the-evaluation","title":"1: Visit the evaluation","text":"<p>Collect the <code>scan_id</code> and <code>evaluation_id</code> from your scan. </p> <p> </p>"},{"location":"guides/downloading-objects/#2-generate-api-credentials","title":"2: Generate API credentials.","text":"<p>See creating an api key. You will need <code>viewer</code> permission.</p>"},{"location":"guides/downloading-objects/#3-run-the-example-script","title":"3: Run the example script","text":"<p>Download the devkit.</p> <pre><code>git clone https://github.com/Techcyte/devkit.git\ncd devkit/src/download-objects\n</code></pre> <p>Run the script with your api credentials as environment variables and <code>scan_id</code>,<code>evaluation_id</code>, and <code>save_location</code> as arguments.</p> <pre><code>CLIENT_ID=&lt;your_client_id&gt; CLIENT_SECRET=&lt;your_client_secret&gt; python ./get_objects.py --scan_id &lt;your_scan_id&gt; --evaluation_id &lt;your_evaluation_id&gt; --save_location ./objects.json\n</code></pre>"},{"location":"guides/model-hosting-service/","title":"Techcyte: Model Hosting Service","text":""},{"location":"guides/model-hosting-service/#i-introduction","title":"I. Introduction","text":"<p>The Model Hosting Service (MHS) is a standalone product designed to provide GPU-based batch processing for Techcyte users. Using their existing Docker tools, users can easily upload their container image to Techcyte and configure them as custom classifiers on the Techcyte platform.</p>"},{"location":"guides/model-hosting-service/#ii-prerequisites","title":"II. Prerequisites","text":"<p>In order to use the ECS you'll need:</p> <ol> <li>A Techcyte account with appropriate permission (Lab Admin or Lab User)  </li> <li>The \"Model Hosting Service\" feature flag turned on</li> </ol>"},{"location":"guides/model-hosting-service/#iii-step-by-step-instructions","title":"III. Step-by-Step Instructions","text":"<p>We'll need to: upload your Docker image, define a runnable container type, configure a case algorithm to use the container, and run a task on your scan.</p>"},{"location":"guides/model-hosting-service/#1-upload-your-docker-image","title":"1: Upload your Docker image","text":"<ul> <li>Visit the Model Hosting Service page: From your worklist view, select the Model Hosting Service from the menu dropdown  </li> </ul> <ul> <li>Create an image definition: Select the \"Docker Images\" tab  </li> </ul> <ul> <li>Click Create Image </li> </ul> <ul> <li>Name your image and click \"Create\" </li> </ul> <ul> <li>Upload your Docker image: </li> </ul> <p>From the command line, in the directory containing your Dockerfile, scripts, execute the four commands shown in the \"Docker Push Instructions\" modal. See example template files here.</p> <p>Use the \"Copy to clipboard\" button for long commands. Uploading may take several minutes.  Once you've uploaded your image, the image status should say \"uploaded\".</p> <p></p> <p> </p> <p></p>"},{"location":"guides/model-hosting-service/#2-create-a-runnable-container","title":"2: Create a runnable container","text":"<ul> <li>Visit the Runnable Containers page.  </li> </ul> <ul> <li>Click \"Create Container\" </li> </ul> <ul> <li>Configure your container: Set the name, select your image, and AWS runtime instance type. You can also configure additional environment variables to customize the container behavior. These variables are sent to the container with each invocation, along with the dynamic default pairs (listed here).  </li> </ul>"},{"location":"guides/model-hosting-service/#3-setup-a-case-algorithm-for-your-container","title":"3: Setup a Case algorithm for your container","text":"<p>From here, we'll need to configure your cases to use your newly created runnable container.</p> <ul> <li>Visit your Company Configuration page: From the menu dropdown select \"Company settings\" -&gt; \"Configuration\"  </li> </ul> <p></p> <ul> <li>Create a new Case algorithm: Click the + icon at the top right  </li> </ul> <p></p> <ul> <li>Configure the case algorithm: Name your algorithm, select \"Model Hosting Service\" as the Model provider, and select your container.  </li> </ul> <p></p>"},{"location":"guides/model-hosting-service/#4-run-an-ai-request-on-your-scan","title":"4: Run an AI Request on your scan","text":"<ul> <li>Create an AI Request: From the case view, right click on your scanned image and select \"AI Task\" or \"AI Request\" </li> </ul> <p>NOTE: If an \"AI models\" request type is not available, you'll need to create one, see Creating an AI request type</p> <ul> <li>Submit the request: From the Create request -&gt; AI Task dialog, select your Case algorithm (My GPU Container here) as the AI model and create the request  </li> </ul> <p></p> <p>At this point your container will start up, and begin processing the image as you have configured it.</p>"},{"location":"guides/model-hosting-service/#iv-troubleshooting","title":"IV. Troubleshooting","text":"<p>Logs will are viewable from the \"Jobs and Logs\" tab on the Model Hosting Service page.  </p> <p></p> <p></p> <p></p>"},{"location":"guides/model-hosting-service/#v-conclusion","title":"V. Conclusion","text":"<p>In a few steps we've uploaded a Docker image, created a runnable container type, defined a case algorithm to use the container, and run an AI task on an uploaded scan. The Model Hosting Service is in active development so new features will be added over time. Images may not be up to date.</p>"},{"location":"guides/posting-external-model-results/","title":"Posting Results from an External Model","text":"<p>Some requests can trigger a 3rd party AI model to analyze scans. That 3rd party will then be able to post the results of the analysis. The REST endpoint where those results may be posted is documented in the Techcyte Swagger docs.</p>"},{"location":"guides/posting-external-model-results/#results-schema","title":"Results Schema","text":""},{"location":"guides/posting-external-model-results/#request-body","title":"Request Body","text":"Key Description Type caseResults Free form results for all scans in the request. Use if there are high level, cross scan results found by the model. object scanResults Array of results for each scan in the request array of objects (ScanResult)"},{"location":"guides/posting-external-model-results/#scanresult-object","title":"ScanResult object","text":"Key Description Type scanId id of scan string results Free form high level results for the scan. Use if there are high level results for the scan. object geojson Feature collection containing annotations found on the scan object (GeoJSON feature collection) <p>The <code>results</code> object has two special keys: <code>external_url</code> and <code>summary</code>, both are required to be strings. If <code>external_url</code> is set, then the Techcte UI will create a clickable link to the provided url when displaying the scan results. The <code>summary</code> for each scan will be displayed at a top level alongside the scans in the ai results panel. All other keys will be displayed when viewing algorithm details for each scan.</p>"},{"location":"guides/posting-external-model-results/#geojson","title":"GeoJSON","text":"<p>Annotations reported to techcyte will use the GeoJSON standard. For each scan the client will report a GeoJSON <code>FeatureCollection</code> that contains all the annotations reported for that scan. Each reported annotation will be a <code>Feature</code> object within the <code>FeatureCollection</code>, and each <code>Feature</code> must have an <code>annotation_type</code> key defined in its <code>properties</code> field.</p> <p>Each GeoJSON feature contains a geometry that can be a one of multiple types. In the example there is a <code>Polygon</code>, a <code>MultiPoint</code> and a <code>GeometryCollection</code>.</p> <p>Heatmaps may be reported as a set of contours in a single Feature with a geometry type of <code>GeometryCollection</code>. The contours are <code>Polygon</code> geometries and their color is specified with the <code>contour_colors</code> key in the properties map of the <code>GeometryCollection</code>. The <code>countour_colors</code> is an array of color hex strings.</p> <p>See more information about the GeoJSON standard on the GeoJSON format standard website.</p>"},{"location":"guides/posting-external-model-results/#example","title":"Example","text":"<pre><code>{\n  \"caseResults\": {\n    \"mitosis_count\": 1000\n  },\n  \"scanResults\": [\n    {\n      \"scanId\": \"T1J4hvqyD4\",\n      \"results\": {\n        \"mitosis_count\": 550,\n        \"ki67score\": .55,\n        \"external_url\": \"https://fake.my-app.com/results/for/this/scan\",\n        \"summary\": \"this is my summary\"\n      },\n      \"geojson\": {\n        \"type\": \"FeatureCollection\",\n        \"features\": [\n          {\n            \"type\": \"Feature\",\n            \"bbox\": [ 250, 100, 300, 200 ],\n            \"geometry\": {\n              \"type\": \"Polygon\",\n              \"coordinates\": [\n                [\n                  [ 250, 100 ],\n                  [ 250, 200 ],\n                  [ 300, 250 ],\n                  [ 300, 100 ],\n                  [ 250, 100 ]\n                ]\n              ]\n            },\n            \"properties\": {\n              \"annotation_type\": \"tumor\"\n            }\n          },\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"annotation_type\": \"tumor_confidence\",\n              \"contour_colors\": [\n                \"#AA0000\",\n                \"#CC0000\",\n                \"#FF0000\"\n              ]\n            },\n            \"geometry\": {\n              \"type\": \"GeometryCollection\",\n              \"geometries\": [\n                {\n                  \"type\": \"Polygon\",\n                  \"coordinates\": [\n                    [\n                      [ 1, 2 ],\n                      [ 3, 2 ],\n                      [ 3, 5 ],\n                      [ 1, 5 ],\n                      [ 1, 2 ]\n                    ]\n                  ]\n                },\n                {\n                  \"type\": \"Polygon\",\n                  \"coordinates\": [\n                    [\n                      [ 1, 2 ],\n                      [ 3, 2 ],\n                      [ 3, 5 ],\n                      [ 1, 5 ],\n                      [ 1, 2 ]\n                    ]\n                  ]\n                },\n                {\n                  \"type\": \"Polygon\",\n                  \"coordinates\": [\n                    [\n                      [ 1, 2 ],\n                      [ 3, 2 ],\n                      [ 3, 5 ],\n                      [ 1, 5 ],\n                      [ 1, 2 ]\n                    ]\n                  ]\n                }\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"scanId\": \"T1J4hvqyD5\",\n      \"results\": {\n        \"mitosis_count\": 450\n      },\n      \"geojson\": {\n        \"type\": \"FeatureCollection\",\n        \"features\": [\n          {\n            \"type\": \"Feature\",\n            \"geometry\": {\n              \"type\": \"MultiPoint\",\n              \"coordinates\": [\n                [ 80, 50 ],\n                [ 90, 49 ],\n                [ 60, 30 ]\n              ]\n            },\n            \"properties\": {\n              \"annotation_type\": \"mitosis_count\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n</code></pre>"}]}